@using myprogram.DAL.Models
@using BlazorApp2.Data

@page "/Subject"
@inject SubjectService subjectService


<h1> Предмети </h1>
@if (subject != null && mode == MODE.Add)
{
    <input @bind="@name" placeholder="Name" />
    <br />
    <button @onclick="Insert" class="btn btn-primary">Вставити </button>

}


@if (subject != null && mode == MODE.EditDelete) // Update & Delete form
{
    <input @bind="@name" placeholder="Name" />
    <br />
    <button @onclick="Update" class="btn btn-primary">Оновити</button>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <button @onclick="Delete" class="btn btn-danger">Видалити</button>
}


@if (subject == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <button @onclick="Add" class="btn btn-success">Додати</button>
    <table class='table table-hover'>
        <thead>
            <tr>
                <th>Код Предмета</th>
                <th>Ім'я предмета</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in subject)
            {
                <tr @onclick="(() => Show(item.KodSubject.ToString()))">
                    <td>@item.KodSubject</td>
                    <td>@item.Name</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    Subject[] subject;
    int kodsubject;
    string name;

    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    Subject subjects;


    protected override async Task OnInitializedAsync()
    {

        await load();
    }
    protected async Task load()
    {
        subject = await subjectService.GetSubjectAsync();
    }

    protected async Task Insert()
    {
        Subject s = new Subject()
        {

            Name = name
        };
        await subjectService.InsertSubjetcAsync(s);
        ClearFields();
        await load();
        mode = MODE.None;
    }
    protected void ClearFields()
    {
        name = string.Empty;
    }
    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
    }
    protected async Task Update()
    {

        Subject s = new Subject()
        {
            KodSubject = kodsubject,
            Name = name
        };

        await subjectService.UpdateSubjectAsync(kodsubject.ToString(), s);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Delete()
    {
        await subjectService.DeleteSubjectAsync(kodsubject);
        ClearFields();
        await load();
        mode = MODE.None;
    }
    protected async Task Show(string id)
    {
        subjects = await subjectService.GetSubjectByIdAsync(id);
        kodsubject = subjects.KodSubject;
        name = subjects.Name;
        mode = MODE.EditDelete;
    }
}